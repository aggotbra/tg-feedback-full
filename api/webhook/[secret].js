import { Telegraf } from 'telegraf';

const BOT_TOKEN = process.env.BOT_TOKEN;
const SECRET = process.env.TELEGRAM_WEBHOOK_SECRET;
const MINIAPP_URL = 'https://tg-feedback-full.vercel.app';

if (!globalThis.__bot) {
  globalThis.__bot = new Telegraf(BOT_TOKEN, { telegram: { webhookReply: true } });

  // —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑
  globalThis.__bot.start((ctx) => ctx.reply('–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
    reply_markup: {
      inline_keyboard: [[
        { text: '–û—Ç–∫—Ä—ã—Ç—å Tiger.com Feedback', web_app: { url: MINIAPP_URL } }
      ]]
    }
  }));

  globalThis.__bot.command('ping', (ctx) => ctx.reply('pong üèì'));

  // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é
  globalThis.__bot.telegram.setChatMenuButton(undefined, {
    type: 'web_app',
    text: 'Tiger.com Feedback',
    web_app: { url: MINIAPP_URL },
  }).catch(() => {});

  globalThis.__handlersAttached = true;
}

const bot = globalThis.__bot;

export default async function handler(req, res) {
  // —Å–µ–∫—Ä–µ—Ç –≤ –ø—É—Ç–∏: /api/webhook/:secret
  const { secret } = req.query;
  if (!SECRET || secret !== SECRET) {
    return res.status(404).send('NOT_FOUND');
  }

  // —Å–µ–∫—Ä–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –æ—Ç Telegram (–º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –≤ setWebhook)
  const headerSecret = req.headers['x-telegram-bot-api-secret-token'];
  if (SECRET && headerSecret !== SECRET) {
    return res.status(401).json({ ok: false, error: 'unauthorized' });
  }

  // —á–∏—Ç–∞–µ–º —Å—ã—Ä–æ–µ —Ç–µ–ª–æ
  let raw = '';
  for await (const chunk of req) raw += chunk;
  let update;
  try { update = JSON.parse(raw || '{}'); }
  catch { return res.status(400).json({ ok:false, error:'invalid_json' }); }

  try {
    await bot.handleUpdate(update);
    return res.status(200).end();
  } catch (e) {
    console.error('webhook error:', e);
    return res.status(200).end();
  }
}
